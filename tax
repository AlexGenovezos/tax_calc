  def tax(orders, tax_rates ), do: _tax([], orders, tax_rates)
  defp _tax(acc,[], _tax_rates), do: Enum.reverse(acc)
  defp _tax(acc,[h|t], tax_rates), do: _tax(acc, h, t, tax_rates)
  def _tax(acc, h, t, tax_rates) do
    case Keyword.get(h, :ship_to) do
      :NC ->
        net_amount = Keyword.get(h, :net_amount)
        rate = Keyword.get(tax_rates, :NC)
        math = ((net_amount * rate) + net_amount)
        add_on = [total_amount: math]
        nl = Keyword.merge(h,add_on)
        newlist = Enum.map(nl, fn {a, b} -> {a, b} end)
        _tax([newlist|acc], t, tax_rates)
      :TX ->
        net_amount = Keyword.get(h, :net_amount)
        rate = Keyword.get(tax_rates, :TX)
        math = ((net_amount * rate) + net_amount)
        add_on = [total_amount: math]
        nl = Keyword.merge(h,add_on)
        newlist = Enum.map(nl, fn {a, b} -> {a, b} end)
        _tax([newlist|acc], t, tax_rates)
      _ ->
        net_amount = Keyword.get(h, :net_amount)
        add_on = [total_amount: net_amount]
        nl = Keyword.merge(h,add_on)
        newlist = Enum.map(nl, fn {a, b} -> {a, b} end)
        _tax([newlist|acc], t, tax_rates)
    end
